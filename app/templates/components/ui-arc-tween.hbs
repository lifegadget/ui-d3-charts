<script> 
var width = 960, height = 500, τ = 2 * Math.PI; 
// http://tauday.com/tau-manifesto 
// An arc function with all values bound except the endAngle. So, to compute an 
// SVG path string for a given angle, we pass an object with an endAngle 
// property to the `arc` function, and it will return the corresponding string. 
var arc = d3.svg.arc() .innerRadius(180) .outerRadius(240) .startAngle(0); 
// Create the SVG container, and apply a transform such that the origin is the 
// center of the canvas. This way, we don't need to position arcs individually. 
var svg = d3.select("#arc")
	.append("svg")
	.attr("width", width)
	.attr("height", height)
	.append("g")
	.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")"); 
// Add the background arc, from 0 to 100% (τ). 
var background = svg.append("path") 
	.datum({endAngle: τ}) 
	.style("fill", "#ddd") 
	.attr("d", arc); 
// Add the foreground arc in orange, currently showing 12.7%. 
var foreground = svg.append("path")
	.datum({endAngle: .127 * τ})
	.style("fill", "orange")
	.attr("d", arc);

setInterval(function() { 
	foreground.transition()
		.duration(750)
		.call(arcTween, Math.random() * τ); 
}, 1500); 

function arcTween(transition, newAngle) { 
	transition.attrTween("d", function(d) { 
		var interpolate = d3.interpolate(d.endAngle, newAngle); 
		return function(t) { 
			d.endAngle = interpolate(t); 
			return arc(d); 
		}; 
	}); 
} 
</script>
<div id="arc"></div>